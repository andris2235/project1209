// server/src/service/multiviewer.ts
import * as net from "net";
import * as winston from "winston";
import "winston-daily-rotate-file";
import * as path from "path";

const transport = new winston.transports.DailyRotateFile({
  filename: path.join(__dirname, "..", "logs", "multiviewer-%DATE%.log"),
  datePattern: "YYYY-MM-DD",
  zippedArchive: true,
  maxSize: "20m",
  maxFiles: "30d",
});
const logger = winston.createLogger({
  level: "info",
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [transport],
});

const MV_HOST = process.env.MV_HOST ?? "";
const MV_PORT = process.env.MV_PORT ? +process.env.MV_PORT : 1010;

let mvSocket: net.Socket | null = null;
let reconnectTimeout: NodeJS.Timeout | null = null;

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function startHealthCheck() {
  setInterval(() => {
    if (mvSocket && !mvSocket.destroyed) {
      logger.info("‚úîÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ MV: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ");
    } else {
      logger.warn("‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ MV: —Å–æ–∫–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
    }
  }, 300000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
}

// –†–µ–≥—É–ª—è—Ä–Ω—ã–π –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function startPollingStatus() {
  setInterval(() => {
    if (mvSocket && !mvSocket.destroyed) {
      // –ø—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
      mvSocket.write("get window layout status\r\n");
      logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω polling-–∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ MV");
    }
  }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

export function connectMV(): void {
  if (reconnectTimeout) {
    clearTimeout(reconnectTimeout);
    reconnectTimeout = null;
  }

  mvSocket = new net.Socket();
  mvSocket.setKeepAlive(true, 60000); // TCP keep-alive –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

  mvSocket.connect(MV_PORT, MV_HOST, () => {
    logger.info("‚úÖ Connected to multiviewer");
  });

  mvSocket.on("error", (err) => {
    logger.error("‚ùå MV connection error:", { message: err.message });
    scheduleReconnect();
  });

  mvSocket.on("end", () => {
    logger.warn("üîå MV connection ended by server");
    scheduleReconnect();
  });

  mvSocket.on("close", (hadError) => {
    logger.warn(`üö´ MV connection closed${hadError ? " due to error" : ""}`);
    scheduleReconnect();
  });

  startHealthCheck();
  startPollingStatus();
}

function scheduleReconnect(): void {
  if (mvSocket) {
    mvSocket.destroy();
    mvSocket = null;
  }
  if (reconnectTimeout) {
    clearTimeout(reconnectTimeout);
  }
  reconnectTimeout = setTimeout(() => {
    logger.info("üîÑ Attempting to reconnect to multiviewer...");
    connectMV();
  }, 5000);
}

export function setPreset(n: number): Promise<boolean> {
  return new Promise((resolve, reject) => {
    if (n < 1 || n > 4) {
      reject(new Error(`Invalid preset number: ${n}`));
      return;
    }
    if (!mvSocket || mvSocket.destroyed) {
      logger.warn("üö´ MV socket is undefined or destroyed");
      reject(new Error("Multiviewer not connected"));
      return;
    }
    const code = 4 + n;
    const cmd = `set window layout mode ${code}\r\n`;
    mvSocket.write(cmd, (err) => {
      if (err) {
        logger.error("Failed to write to multiviewer:", { error: err });
        reject(err);
      } else {
        logger.info(`‚úÖ Preset ${n} command sent successfully`);
        resolve(true);
      }
    });
  });
}



// // server/src/service/multiviewer.ts
// import * as net from "net";
// import * as winston from "winston";
// import "winston-daily-rotate-file";
// import * as path from "path";

// const transport = new winston.transports.DailyRotateFile({
//   filename: path.join(__dirname, "..", "logs", "multiviewer-%DATE%.log"),
//   datePattern: "YYYY-MM-DD",
//   zippedArchive: true,
//   maxSize: "20m",
//   maxFiles: "30d",
// });

// const logger = winston.createLogger({
//   level: "info",
//   format: winston.format.combine(
//     winston.format.timestamp(),
//     winston.format.json()
//   ),
//   transports: [transport],
// });

// const MV_HOST = process.env.MV_HOST ?? "";
// const MV_PORT = process.env.MV_PORT ? +process.env.MV_PORT : 1010;

// let mvSocket: net.Socket | null = null;
// let reconnectTimeout: NodeJS.Timeout | null = null;

// /**
//  * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç –∏–ª–∏ null
//  */
// export function getMCSocket(): net.Socket | null {
//   return mvSocket;
// }

// /**
//  * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º—É–ª—å—Ç–∏–≤—å—é–≤–µ—Ä–∞
//  */
// function setupDataLogging(socket: net.Socket) {
//   socket.on("data", (data) => {
//     const msg = data.toString().trim();
//     logger.info("üì• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç MV:", { message: msg });
//   });
// }

// /**
//  * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
//  */
// function startHealthCheck() {
//   setInterval(() => {
//     if (mvSocket && !mvSocket.destroyed) {
//       logger.info("‚úîÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ MV: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ");
//     } else {
//       logger.warn("‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ MV: —Å–æ–∫–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
//     }
//   }, 300000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
// }

// /**
//  * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º—É–ª—å—Ç–∏–≤—å—é–≤–µ—Ä—É
//  */
// export function connectMV(): void {
//   if (reconnectTimeout) {
//     clearTimeout(reconnectTimeout);
//     reconnectTimeout = null;
//   }

//   mvSocket = new net.Socket();

//   mvSocket.connect(MV_PORT, MV_HOST, () => {
//     logger.info("‚úÖ Connected to multiviewer");
//   });

//   // setupDataLogging(mvSocket);

//   mvSocket.on("error", (err) => {
//     logger.error("‚ùå MV connection error:", { message: err.message });
//     scheduleReconnect();
//   });

//   mvSocket.on("end", () => {
//     logger.warn("üîå MV connection ended by server");
//     scheduleReconnect();
//   });

//   mvSocket.on("close", (hadError) => {
//     logger.warn(`üö´ MV connection closed${hadError ? " due to error" : ""}`);
//     scheduleReconnect();
//   });

//   startHealthCheck();
// }

// function scheduleReconnect(): void {
//   if (mvSocket) {
//     mvSocket.destroy();
//     mvSocket = null;
//   }
//   if (reconnectTimeout) {
//     clearTimeout(reconnectTimeout);
//   }
//   reconnectTimeout = setTimeout(() => {
//     logger.info("üîÑ Attempting to reconnect to multiviewer...");
//     connectMV();
//   }, 5000);
// }

// /**
//  * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
//  */
// export function isMultiviewerConnected(): boolean {
//   return mvSocket !== null && !mvSocket.destroyed && (mvSocket as any).readyState === "open";
// }

// /**
//  * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫–∏
//  * @param n - –Ω–æ–º–µ—Ä –ø—Ä–µ—Å–µ—Ç–∞ (1‚Äì4)
//  * @returns Promise<boolean>
//  */
// export function setPreset(n: number): Promise<boolean> {
//   return new Promise((resolve, reject) => {
//     if (n < 1 || n > 4) {
//       reject(new Error(`Invalid preset number: ${n}`));
//       return;
//     }
//     if (!mvSocket || mvSocket.destroyed) {
//       logger.warn("üö´ MV socket is undefined or destroyed");
//       reject(new Error("Multiviewer not connected"));
//       return;
//     }
//     const code = 4 + n;
//     const cmd = `set window layout mode ${code}\r\n`;
//     try {
//       mvSocket.write(cmd, (err) => {
//         if (err) {
//           logger.error("Failed to write to multiviewer:", { error: err });
//           reject(err);
//         } else {
//           logger.info(`‚úÖ Preset ${n} command sent successfully`);
//           resolve(true);
//         }
//       });
//     } catch (error: any) {
//       logger.error("Error sending preset command:", { error: error.message });
//       reject(error);
//     }
//   });
// }
