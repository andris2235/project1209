import { NextFunction, Request, Response } from "express";
import ApiError from "../error/ApiError";
import { setPreset } from "../service/multiviewer";
import onvifController from "../service/OnvifCamera";
import { TvState } from "../types/tv";
import { sendToTV } from "../service/sendToTv";

const CMD_POWER_ON = Buffer.from([0xAA, 0x11, 0x01, 0x01, 0x01, 0x14]);
const CMD_POWER_OFF = Buffer.from([0xAA, 0x11, 0x01, 0x01, 0x00, 0x13]);

// üìä –ü–†–û–°–¢–û–ô LOGGER)
const logger = {
  info: (message: string, context?: any) => {
    console.log(`[INFO] ${new Date().toISOString()} ${message}`, context || '');
  },
  warn: (message: string, context?: any) => {
    console.warn(`[WARN] ${new Date().toISOString()} ${message}`, context || '');
  },
  error: (message: string, context?: any) => {
    console.error(`[ERROR] ${new Date().toISOString()} ${message}`, context || '');
  },
  debug: (message: string, context?: any) => {
    console.debug(`[DEBUG] ${new Date().toISOString()} ${message}`, context || '');
  }
};

class StreamControllers {
  async setTv(req: Request, res: Response, next: NextFunction) {
    // üè∑Ô∏è –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    const operationId = `tv-${req.params.state}-${Date.now()}`;

    // ‚è±Ô∏è –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const startTime = Date.now();

    try {
      // üì• –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const state = req.params.state as TvState;

      // üìä –õ–û–ì–ò–†–£–ï–ú –ù–ê–ß–ê–õ–û –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
      logger.info(`[${operationId}] TV control started`, {
        state,                              // –í–∫–ª—é—á–∞–µ–º –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º
        ip: req.ip,                        // IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
        userAgent: req.get('User-Agent'),  // –ë—Ä–∞—É–∑–µ—Ä/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        timestamp: new Date().toISOString() // –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
      });

      // üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const command = state === "off" ? CMD_POWER_OFF : CMD_POWER_ON;

      // üìä –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã
      logger.debug(`[${operationId}] Sending TV command`, {
        state,
        commandBytes: Array.from(command).map(b => `0x${b.toString(16).toUpperCase()}`),
        commandLength: command.length
      });

      // üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
      const result = await sendToTV(command);

      if (!result) {
        // ‚ùå TV –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É
        const duration = Date.now() - startTime;
        logger.error(`[${operationId}] TV command rejected`, {
          state,
          duration,                        // –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è–ª–æ
          tvResponse: result,              // –ß—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª TV
          reason: "tv_rejected_command"
        });
        return next(ApiError.internal("TV command failed"));
      }

      // ‚úÖ –£–°–ü–ï–• - –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const duration = Date.now() - startTime;
      logger.info(`[${operationId}] TV control success`, {
        state,
        duration,                          // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        performance: duration < 1000 ? "fast" :
          duration < 3000 ? "normal" : "slow", // –û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        tvResponse: result
      });

      // üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      return res.status(200).json({
        status: "ok",
        state,
        operationId,                       // ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        duration
      });

    } catch (error: any) {
      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏
      const duration = Date.now() - startTime;
      logger.error(`[${operationId}] TV control failed`, {
        state: req.params.state,
        duration,
        error: error.message,              // –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        errorType: error.constructor.name, // –¢–∏–ø –æ—à–∏–±–∫–∏
        stack: error.stack,                // –ü–æ–ª–Ω—ã–π stack trace
        ip: req.ip,
        userAgent: req.get('User-Agent'),

        // üîç –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        serverUptime: process.uptime(),    // –°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
        memoryUsage: process.memoryUsage(), // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        timestamp: new Date().toISOString()
      });

      return next(ApiError.internal(`TV error: ${error.message}`));
    }
  }

  async setPreset(req: Request, res: Response, next: NextFunction) {
    // üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è preset –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = `preset-${req.params.n}-${Date.now()}`;
    const startTime = Date.now();

    try {
      const n = parseInt(req.params.n, 10);

      // üìä –õ–û–ì–ò–†–£–ï–ú –ù–ê–ß–ê–õ–û –æ–ø–µ—Ä–∞—Ü–∏–∏
      logger.info(`[${operationId}] Preset change started`, {
        preset: n,
        ip: req.ip,
        userAgent: req.get('User-Agent'),
        timestamp: new Date().toISOString()
      });

      // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (n < 1 || n > 4) {
        // ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.warn(`[${operationId}] Invalid preset number`, {
          preset: n,
          validRange: "1-4",
          ip: req.ip,
          reason: "validation_failed"
        });
        return next(ApiError.badRequest("Invalid preset number"));
      }

      // üìä –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
      logger.debug(`[${operationId}] Executing multiviewer preset command`, {
        preset: n,
        timeout: 15000
      });

      // üéØ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const result = await Promise.race([
        setPreset(n),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Preset timeout")), 15000)
        )
      ]);

      if (!result) {
        // ‚ùå –ú—É–ª—å—Ç–∏–≤—å—é–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É
        const duration = Date.now() - startTime;
        logger.error(`[${operationId}] Multiviewer preset rejected`, {
          preset: n,
          duration,
          multiviewerResponse: result,
          reason: "multiviewer_rejected"
        });
        return next(ApiError.internal("Multiviewer preset failed"));
      }

      // ‚úÖ –£–°–ü–ï–•
      const duration = Date.now() - startTime;
      logger.info(`[${operationId}] Preset change success`, {
        preset: n,
        duration,
        performance: duration < 2000 ? "fast" :
          duration < 5000 ? "normal" : "slow",
        multiviewerResponse: result
      });

      return res.json({
        status: "ok",
        preset: n,
        operationId,
        duration
      });

    } catch (error: any) {
      const duration = Date.now() - startTime;

      // üö® –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const errorType = error.message.includes("timeout") ? "timeout" :
        error.message.includes("network") ? "network" :
          error.message.includes("ECONNREFUSED") ? "connection_refused" :
            "unknown";

      logger.error(`[${operationId}] Preset change failed`, {
        preset: req.params.n,
        duration,
        error: error.message,
        errorType,
        stack: error.stack,
        ip: req.ip,
        userAgent: req.get('User-Agent'),

        // üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        serverUptime: process.uptime(),
        memoryUsage: process.memoryUsage(),
        timestamp: new Date().toISOString()
      });

      return next(ApiError.internal(`Preset error: ${error.message}`));
    }
  }

  async moveCamera(req: Request, res: Response, next: NextFunction) {
    // üè∑Ô∏è ID –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–º–µ—Ä–µ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    const { cam } = req.params;
    const { x, y, z } = req.body;
    const operationId = `move-${cam}-${Date.now()}`;
    const startTime = Date.now();

    try {
      // üìä –õ–û–ì–ò–†–£–ï–ú –ù–ê–ß–ê–õ–û –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
      logger.info(`[${operationId}] Camera move started`, {
        camera: cam,
        coordinates: { x, y, z },
        ip: req.ip,
        userAgent: req.get('User-Agent'),
        timestamp: new Date().toISOString()
      });

      // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!cam || typeof z !== "number" || typeof x !== "number" || typeof y !== "number") {
        logger.warn(`[${operationId}] Invalid camera move parameters`, {
          camera: cam,
          coordinates: { x, y, z },
          reason: "missing_or_invalid_coordinates",
          ip: req.ip
        });
        return next(ApiError.badRequest("Incomplete data"));
      }

      // üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (Math.abs(x) > 1 || Math.abs(y) > 1 || Math.abs(z) > 1) {
        logger.warn(`[${operationId}] Camera coordinates out of range`, {
          camera: cam,
          coordinates: { x, y, z },
          validRange: "[-1, 1]",
          reason: "coordinates_out_of_range"
        });
        return next(ApiError.badRequest("Camera coordinates must be between -1 and 1"));
      }

      // üìä –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ONVIF –∫–æ–º–∞–Ω–¥—ã
      logger.debug(`[${operationId}] Sending ONVIF move command`, {
        camera: cam,
        coordinates: { x, y, z },
        timeout: 10000,
        protocol: "ONVIF"
      });

      // üéØ –í—ã–ø–æ–ª–Ω—è–µ–º ONVIF –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const { success, message } = await Promise.race([
        onvifController.moveCamera(cam, x, y, z),
        new Promise<{ success: boolean, message: string }>((_, reject) =>
          setTimeout(() => reject(new Error("ONVIF timeout")), 10000)
        )
      ]);

      if (!success) {
        // ‚ùå –ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∫–æ–º–∞–Ω–¥—É
        const duration = Date.now() - startTime;
        logger.error(`[${operationId}] Camera move rejected`, {
          camera: cam,
          coordinates: { x, y, z },
          duration,
          cameraResponse: message,
          reason: "camera_rejected_command"
        });
        return next(ApiError.internal(`Camera move failed: ${message}`));
      }

      // ‚úÖ –£–°–ü–ï–•
      const duration = Date.now() - startTime;
      logger.info(`[${operationId}] Camera move success`, {
        camera: cam,
        coordinates: { x, y, z },
        duration,
        performance: duration < 1000 ? "fast" :
          duration < 3000 ? "normal" : "slow",
        cameraResponse: message
      });

      res.json({
        status: "ok",
        action: "move",
        cam,
        coordinates: { x, y, z },
        operationId,
        duration
      });

    } catch (error: any) {
      const duration = Date.now() - startTime;

      // üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∫–∞–º–µ—Ä—ã
      const errorType = error.message.includes("timeout") ? "onvif_timeout" :
        error.message.includes("ONVIF") ? "onvif_protocol_error" :
          error.message.includes("network") ? "network_error" :
            error.message.includes("Unauthorized") ? "authentication_error" :
              "unknown_camera_error";

      logger.error(`[${operationId}] Camera move failed`, {
        camera: cam,
        coordinates: req.body,
        duration,
        error: error.message,
        errorType,
        stack: error.stack,
        ip: req.ip,
        userAgent: req.get('User-Agent'),

        // üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        serverUptime: process.uptime(),
        memoryUsage: process.memoryUsage(),
        timestamp: new Date().toISOString()
      });

      return next(ApiError.internal(`Camera move error: ${error.message}`));
    }
  }

  async stopCamera(req: Request, res: Response, next: NextFunction) {
    const { cam } = req.params;
    const operationId = `stop-${cam}-${Date.now()}`;
    const startTime = Date.now();

    try {
      // üìä –õ–û–ì–ò–†–£–ï–ú –ù–ê–ß–ê–õ–û –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã
      logger.info(`[${operationId}] Camera stop started`, {
        camera: cam,
        ip: req.ip,
        userAgent: req.get('User-Agent'),
        timestamp: new Date().toISOString()
      });

      if (!cam) {
        logger.warn(`[${operationId}] Missing camera ID`, {
          reason: "no_camera_specified",
          ip: req.ip
        });
        return next(ApiError.badRequest("Incomplete data"));
      }

      // üìä –õ–æ–≥–∏—Ä—É–µ–º ONVIF stop –∫–æ–º–∞–Ω–¥—É
      logger.debug(`[${operationId}] Sending ONVIF stop command`, {
        camera: cam,
        timeout: 5000,
        protocol: "ONVIF"
      });

      // üéØ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      const { success, message } = await Promise.race([
        onvifController.stopCamera(cam),
        new Promise<{ success: boolean, message: string }>((_, reject) =>
          setTimeout(() => reject(new Error("ONVIF timeout")), 5000)
        )
      ]);

      if (!success) {
        const duration = Date.now() - startTime;
        logger.error(`[${operationId}] Camera stop rejected`, {
          camera: cam,
          duration,
          cameraResponse: message,
          reason: "camera_rejected_stop"
        });
        return next(ApiError.internal(`Camera stop failed: ${message}`));
      }

      // ‚úÖ –£–°–ü–ï–•
      const duration = Date.now() - startTime;
      logger.info(`[${operationId}] Camera stop success`, {
        camera: cam,
        duration,
        performance: duration < 500 ? "fast" :
          duration < 1500 ? "normal" : "slow",
        cameraResponse: message
      });

      res.json({
        status: "ok",
        action: "stop",
        cam,
        operationId,
        duration
      });

    } catch (error: any) {
      const duration = Date.now() - startTime;

      logger.error(`[${operationId}] Camera stop failed`, {
        camera: cam,
        duration,
        error: error.message,
        errorType: error.constructor.name,
        stack: error.stack,
        ip: req.ip,
        userAgent: req.get('User-Agent'),
        serverUptime: process.uptime(),
        memoryUsage: process.memoryUsage(),
        timestamp: new Date().toISOString()
      });

      return next(ApiError.internal(`Camera stop error: ${error.message}`));
    }
  }
}

const streamControllers = new StreamControllers();
export default streamControllers;
